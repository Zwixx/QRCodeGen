/*
 Copyright 2012 Stefan Ganzer

 This file is part of QRCodeGen.

 QRCodeGen is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 QRCodeGen is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package qrcodegen.modules.vcardgenpanel.view;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.nio.charset.Charset;
import java.util.ResourceBundle;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.DocumentFilter;
import qrcodegen.documentfilter.DocumentEncodableFilter;
import qrcodegen.documentfilter.DocumentSizeFilter;
import qrcodegen.modules.vcardgenpanel.PropertyProviderViews;
import qrcodegen.modules.vcardgenpanel.presentationmodel.NotePresentationModel;
import qrcodegen.tools.StaticTools;
import qrcodegen.tools.SwingTools;

/**
 * This class is designed to work in conjunction with a VCardNoteController and
 * a VCardNotePanel.
 *
 * @author Stefan Ganzer
 */
public class VCardNotePanel extends javax.swing.JPanel implements PropertyProviderViews {

	private static final ResourceBundle RES = ResourceBundle.getBundle("qrcodegen/modules/vcardgenpanel/view/VCardNotePanel");
	private static final int MNEMONIC = getKeyCodeFromResourceBundle("MNEMONIC");
	private static final DocumentFilter FILTER = new DocumentSizeFilter(400, new DocumentEncodableFilter(Charset.forName("UTF-8")));
	private final ModelListener modelListener = new ModelListener();
	private final NotePresentationModel presentationModel;

	/** Creates new form VCardNamePanel */
	public VCardNotePanel(NotePresentationModel model) {
		if (model == null) {
			throw new NullPointerException();
		}
		this.presentationModel = model;
		initComponents();
		initFields();
		initFilters();
		initDocumentListener();
		setName(RES.getString("NOTE"));
		presentationModel.addPropertyChangeListener(modelListener);
	}

	private void initDocumentListener() {
		DocumentListener listener = new DocumentListener() {
			@Override
			public void insertUpdate(DocumentEvent e) {
				update();
			}

			@Override
			public void removeUpdate(DocumentEvent e) {
				update();
			}

			@Override
			public void changedUpdate(DocumentEvent e) {
				update();
			}

			private void update() {
				presentationModel.setNote(noteTextArea.getText());
			}
		};

		noteTextArea.getDocument().addDocumentListener(listener);
	}

	private void initFields() {
		noteLabel.setLabelFor(noteTextArea);
	}

	private void initFilters() {
		SwingTools.setDocumentFilter(noteTextArea, FILTER);
	}

	@Override
	public JPanel getJPanel() {
		return this;
	}

	@Override
	public int getMnemonic() {
		return MNEMONIC;
	}

	private static int getKeyCodeFromResourceBundle(String key) {
		assert key != null;
		return StaticTools.getKeyCodeForString(RES.getString(key));
	}

	private class ModelListener implements PropertyChangeListener {

		@Override
		public void propertyChange(PropertyChangeEvent evt) {
			final String propertyName = evt.getPropertyName();
			if (NotePresentationModel.NOTE_ELEMENT.equals(propertyName)) {
				String newNote = presentationModel.getNote();
				if (!noteTextArea.getText().equals(newNote)) {
					noteTextArea.setText(newNote);
				}
			}
		}
	}

	/** This method is called from within the constructor to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        noteLabel = new JLabel();
        jScrollPane1 = new JScrollPane();
        noteTextArea = new JTextArea();

        noteLabel.setText(RES.getString("VCardNotePanel.noteLabel.text")); // NOI18N

        noteTextArea.setColumns(20);
        noteTextArea.setRows(5);
        jScrollPane1.setViewportView(noteTextArea);

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(noteLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(noteLabel)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                .addContainerGap(14, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JScrollPane jScrollPane1;
    private JLabel noteLabel;
    private JTextArea noteTextArea;
    // End of variables declaration//GEN-END:variables
}
