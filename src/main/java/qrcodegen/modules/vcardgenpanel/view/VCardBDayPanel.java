/*
 Copyright 2012 Stefan Ganzer

 This file is part of QRCodeGen.

 QRCodeGen is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 QRCodeGen is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package qrcodegen.modules.vcardgenpanel.view;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ResourceBundle;
import javax.swing.ButtonGroup;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.LayoutStyle.ComponentPlacement;
import qrcodegen.modules.vcardgenpanel.BDayDatePanel;
import qrcodegen.modules.vcardgenpanel.BDayTextPanel;
import qrcodegen.modules.vcardgenpanel.PropertyProviderViews;
import qrcodegen.modules.vcardgenpanel.model.DateFormat;
import qrcodegen.modules.vcardgenpanel.presentationmodel.VCardBDayPresentationModel;
import qrcodegen.tools.StaticTools;

/**
 *
 * @author Stefan Ganzer
 */
public class VCardBDayPanel extends javax.swing.JPanel implements PropertyProviderViews {

	public static final String PANEL_STATUS = "PanelStatus";
	private static final String DATE_RADIO_BUTTON_ACTION_COMMAND = "dateCommand";
	private static final String TEXT_RADIO_BUTTON_ACTION_COMMAND = "textCommand";
	private static final ResourceBundle RES = ResourceBundle.getBundle("qrcodegen/modules/vcardgenpanel/view/VCardBDayPanel");
	private static final int MNEMONIC = getKeyCodeFromResourceBundle("MNEMONIC");
	private final VCardBDayPresentationModel presentationModel;

	/** Creates new form VCardBDayPanel
	 *
	 * @param presentationModel
	 */
	public VCardBDayPanel(VCardBDayPresentationModel presentationModel) {
		if (presentationModel == null) {
			throw new NullPointerException();
		}
		setName(RES.getString("BIRTHDAY"));
		this.presentationModel = presentationModel;
		initComponents();
		initRadioButtons();
		this.presentationModel.addPropertyChangeListener(new ModelPropertyChangeListener());
	}

	/** This method is called from within the constructor to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup = new ButtonGroup();
        birthdayLabel = new JLabel();
        dateRadioButton = new JRadioButton();
        textRadioButton = new JRadioButton();
        bdayDatePanel = new BDayDatePanel(presentationModel);
        bdayTextPanel = new BDayTextPanel(presentationModel);

        birthdayLabel.setText(RES.getString("VCardBDayPanel.birthdayLabel.text")); // NOI18N

        buttonGroup.add(dateRadioButton);
        dateRadioButton.setSelected(true);

        buttonGroup.add(textRadioButton);

        bdayTextPanel.setEnabled(false);

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(birthdayLabel)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(textRadioButton)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(bdayTextPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(dateRadioButton)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(bdayDatePanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.CENTER)
                    .addComponent(bdayDatePanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateRadioButton)
                    .addComponent(birthdayLabel))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(Alignment.CENTER)
                    .addComponent(bdayTextPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(textRadioButton))
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private BDayDatePanel bdayDatePanel;
    private BDayTextPanel bdayTextPanel;
    private JLabel birthdayLabel;
    private ButtonGroup buttonGroup;
    private JRadioButton dateRadioButton;
    private JRadioButton textRadioButton;
    // End of variables declaration//GEN-END:variables

	@Override
	public JPanel getJPanel() {
		return this;
	}

	@Override
	public int getMnemonic() {
		return MNEMONIC;
	}

	private static int getKeyCodeFromResourceBundle(String key) {
		assert key != null;
		return StaticTools.getKeyCodeForString(RES.getString(key));
	}

	private void initRadioButtons() {
		dateRadioButton.setActionCommand(DATE_RADIO_BUTTON_ACTION_COMMAND);
		textRadioButton.setActionCommand(TEXT_RADIO_BUTTON_ACTION_COMMAND);

		ActionListener buttonListener = new RadioButtonsActionListener();
		dateRadioButton.addActionListener(buttonListener);
		textRadioButton.addActionListener(buttonListener);
	}

	private class RadioButtonsActionListener implements ActionListener {

		@Override
		public void actionPerformed(ActionEvent e) {
			final String command = e.getActionCommand();
			if (DATE_RADIO_BUTTON_ACTION_COMMAND.equals(command)) {
				presentationModel.setDateFormat(DateFormat.DATE);
			} else if (TEXT_RADIO_BUTTON_ACTION_COMMAND.equals(command)) {
				presentationModel.setDateFormat(DateFormat.FREEFORM);
			}
		}
	}

	private class ModelPropertyChangeListener implements PropertyChangeListener {

		@Override
		public void propertyChange(PropertyChangeEvent evt) {
			final String propertyName = evt.getPropertyName();

			if (VCardBDayPresentationModel.DATE_FORMAT_ELEMENT.equals(propertyName)) {
				DateFormat df = presentationModel.getDateFormat();
				switch (df) {
					case FREEFORM:
						// setSelected does not trigger an actionEvent
						textRadioButton.setSelected(true);
						break;
					case DATE:
					//fall-through
					case TIME:
					//fall-through
					case DATE_TIME:
					//fall-through
					case DATE_AND_OR_TIME:
						// setSelected does not trigger an actionEvent
						dateRadioButton.setSelected(true);
						break;
					default:
						throw new AssertionError(df);
				}
			}else if(VCardBDayPresentationModel.VALIDITY.equals(propertyName)){
				firePropertyChange(PANEL_STATUS, evt.getOldValue(), evt.getNewValue());
			}
		}
	}
}
