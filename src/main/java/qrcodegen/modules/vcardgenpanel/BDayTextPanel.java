/*
 Copyright 2012 Stefan Ganzer

 This file is part of QRCodeGen.

 QRCodeGen is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 QRCodeGen is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package qrcodegen.modules.vcardgenpanel;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.nio.charset.Charset;
import java.util.ResourceBundle;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JTextField;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.DocumentFilter;
import qrcodegen.documentfilter.DocumentEncodableFilter;
import qrcodegen.documentfilter.DocumentSizeFilter;
import qrcodegen.modules.vcardgenpanel.model.VCardBDayModel;
import qrcodegen.modules.vcardgenpanel.presentationmodel.VCardBDayPresentationModel;
import qrcodegen.tools.SwingTools;

/**
 *
 * @author Stefan Ganzer
 */
public class BDayTextPanel extends javax.swing.JPanel {

	private static final ResourceBundle RES = ResourceBundle.getBundle("qrcodegen/modules/vcardgenpanel/BDayTextPanel");
	private static final int MAX_INPUT_LENGTH = 100;
	private static final Charset UTF_8 = Charset.forName("UTF-8");
	private final ImageIcon failureIcon = SwingTools.getSingleton().createImageIcon(this.getClass(), "/qrcodegen/modules/vcardgenpanel/view/images/Stop16.gif", null);
	private final ModelListener modelListener = new ModelListener();
	private final VCardBDayPresentationModel presentationModel;

	public BDayTextPanel() {
		this(new VCardBDayPresentationModel(new VCardBDayModel()));
	}

	/** Creates new form BDayTextPanel */
	public BDayTextPanel(VCardBDayPresentationModel model) {
		if (model == null) {
			throw new NullPointerException();
		}
		this.presentationModel = model;
		initComponents();
		initLabel();
		setDocumentFilter();
		initDocumentListener();
		presentationModel.addPropertyChangeListener(modelListener);
	}

	private void setDocumentFilter() {
		DocumentFilter df = new DocumentSizeFilter(MAX_INPUT_LENGTH, new DocumentEncodableFilter(UTF_8));
		SwingTools.setDocumentFilter(textField, df);
	}

	private void initDocumentListener() {
		DocumentListener listener = new DocumentListener() {
			@Override
			public void insertUpdate(DocumentEvent e) {
				update();
			}

			@Override
			public void removeUpdate(DocumentEvent e) {
				update();
			}

			@Override
			public void changedUpdate(DocumentEvent e) {
				update();
			}

			private void update() {
				String s = textField.getText();
				presentationModel.setFreeformDate(s);
			}
		};
		textField.getDocument().addDocumentListener(listener);

	}

	private void initLabel() {
		label.setLabelFor(textField);
	}

	@Override
	public void setEnabled(boolean enabled) {
		textField.setEnabled(enabled);
		super.setEnabled(enabled);
	}

	/**
	 * This method should only be called by the PropertyChangeListener
	 */
	private void setStatusLabel() {
		statusLabel.setIcon(failureIcon);
	}

	/**
	 * This method should only be called by the PropertyChangeListener
	 */
	private void resetStatusLabel() {
		statusLabel.setIcon(null);
	}

	private class ModelListener implements PropertyChangeListener {

		@Override
		public void propertyChange(PropertyChangeEvent evt) {
			final String propertyName = evt.getPropertyName();
			if (VCardBDayPresentationModel.FREEFORM_DATE_ELEMENT.equals(propertyName)) {
				String newValue = presentationModel.getFreeformDate();
				if (!textField.getText().equals(newValue)) {
					textField.setText(newValue);
				}
			} else if (VCardBDayPresentationModel.FREEFORM_DATE_VALIDITY.equals(propertyName)) {
				InputValidity iv = (InputValidity) evt.getNewValue();
				if (iv != null) {
					if (InputValidity.INVALID == iv) {
						setStatusLabel();
					} else {
						resetStatusLabel();
					}
				}
			} else if (VCardBDayPresentationModel.DATE_FORMAT_ELEMENT.equals(propertyName)) {
				setEnabled(presentationModel.isFreeformDateEnabled());
			}
		}
	}

	/** This method is called from within the constructor to initialize the
	 * form. WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textField = new JTextField();
        label = new JLabel();
        statusLabel = new JLabel();
        jLabel1 = new JLabel();

        textField.setColumns(10);

        label.setText(RES.getString("BDayTextPanel.label.text")); 
        statusLabel.setText(RES.getString("BDayTextPanel.statusLabel.text")); 
        jLabel1.setText(RES.getString("BDayTextPanel.jLabel1.text")); 
        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(label)
                        .addGap(18, 18, 18)
                        .addComponent(textField)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(statusLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.BASELINE)
                    .addComponent(label)
                    .addComponent(textField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(statusLabel))
                .addPreferredGap(ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel jLabel1;
    private JLabel label;
    private JLabel statusLabel;
    private JTextField textField;
    // End of variables declaration//GEN-END:variables
}
