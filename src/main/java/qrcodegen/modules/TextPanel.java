/*
 Copyright 2011 Stefan Ganzer

 This file is part of QRCodeGen.

 QRCodeGen is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 QRCodeGen is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.

 You should have received a copy of the GNU General Public License
 along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package qrcodegen.modules;

import java.awt.Component;
import java.awt.Image;
import java.awt.event.KeyEvent;
import java.awt.print.Printable;
import java.nio.charset.Charset;
import java.util.Arrays;
import java.util.Set;
import javax.swing.DropMode;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.AbstractDocument;
import qrcodegen.ContentModule;
import qrcodegen.documentfilter.DocumentSizeFilter;

/**
 * A ContentModule implementation for creating QR Codes from free text.
 *
 * @author Stefan Ganzer
 */
public class TextPanel extends javax.swing.JPanel implements ContentModule {

	private static final int MNEMONIC = KeyEvent.VK_T;
	private final DocumentListener textListener = new TextListener();
	private transient ChangeEvent changeEvent;
	/** Maximum number of characters allowed in the textArea. Maximum number of digits
	 * with ErrorCorrection.L and ISO-8859-1: 7089 */
	private static final int MAX_CHARACTERS = 7090;

	/**
	 * Creates new form WifiPanel
	 */
	public TextPanel() {
		initComponents();
		setName("Text");
		jTextArea.setDropMode(DropMode.INSERT);
		textLabel.setDisplayedMnemonic(MNEMONIC);
		textLabel.setLabelFor(jTextArea);
		AbstractDocument ad = (AbstractDocument) jTextArea.getDocument();
		ad.addDocumentListener(textListener);
		ad.setDocumentFilter(new DocumentSizeFilter(MAX_CHARACTERS));
	}

	@Override
	public String getContent() {
		return jTextArea.getText();
	}

	@Override
	public Component getComponent() {
		return this;
	}

	@Override
	public int getMnemonic() {
		return MNEMONIC;
	}

	@Override
	public Printable getPrintable(Image qrcode) {
		return null;
	}

	@Override
	public String getJobName() {
		return "";
	}
	
	@Override
	public boolean restrictsEncoding(){
		return false;
	}
	
	@Override
	public Set<Charset> getEncodingSubset(){
		return null;
	}

	private final class TextListener implements DocumentListener {

		@Override
		public void insertUpdate(DocumentEvent e) {
			fireContentChanged();
		}

		@Override
		public void removeUpdate(DocumentEvent e) {
			fireContentChanged();
		}

		@Override
		public void changedUpdate(DocumentEvent e) {
			fireContentChanged();
		}
	}

	@Override
	public synchronized void addChangeListener(ChangeListener listener) {
		if (listener == null) {
			throw new NullPointerException();
		}
		if (Arrays.asList(listenerList.getListeners(ChangeListener.class)).contains(listener)) {
			throw new IllegalStateException("Trying to register listener twice: " + listener);
		}
		listenerList.add(ChangeListener.class, listener);
	}

	@Override
	public synchronized void removeChangeListener(ChangeListener listener) {
		if (listener == null) {
			throw new NullPointerException();
		}
		if (!Arrays.asList(listenerList.getListeners(ChangeListener.class)).contains(listener)) {
			throw new IllegalStateException("Trying to remove unregistered listener: " + listener);
		}
		listenerList.remove(ChangeListener.class, listener);
	}

	private void fireContentChanged() {
		final Object[] listeners = listenerList.getListenerList();
		// Process the listeners last to first, notifying
		// those that are interested in this event
		for (int i = listeners.length - 2; i >= 0; i -= 2) {
			if (listeners[i] == ChangeListener.class) {
				// Lazily create the event:
				if (changeEvent == null) {
					changeEvent = new ChangeEvent(this);
				}
				((ChangeListener) listeners[i + 1]).stateChanged(changeEvent);
			}
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea = new javax.swing.JTextArea();

        textLabel.setText("Text");

        jTextArea.setColumns(20);
        jTextArea.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        jTextArea.setLineWrap(true);
        jTextArea.setRows(4);
        jScrollPane1.setViewportView(jTextArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(textLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                    .addComponent(textLabel))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea;
    private final javax.swing.JLabel textLabel = new javax.swing.JLabel();
    // End of variables declaration//GEN-END:variables
}
